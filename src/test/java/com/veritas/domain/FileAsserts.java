package com.veritas.domain;

import static com.veritas.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class FileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAllPropertiesEquals(File expected, File actual) {
        assertFileAutoGeneratedPropertiesEquals(expected, actual);
        assertFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAllUpdatablePropertiesEquals(File expected, File actual) {
        assertFileUpdatableFieldsEquals(expected, actual);
        assertFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileAutoGeneratedPropertiesEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUpdatableFieldsEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File relevant properties")
            .satisfies(e -> assertThat(e.getFilename()).as("check filename").isEqualTo(actual.getFilename()))
            .satisfies(e -> assertThat(e.getBucketName()).as("check bucketName").isEqualTo(actual.getBucketName()))
            .satisfies(e -> assertThat(e.getObjectName()).as("check objectName").isEqualTo(actual.getObjectName()))
            .satisfies(e -> assertThat(e.getContentType()).as("check contentType").isEqualTo(actual.getContentType()))
            .satisfies(e -> assertThat(e.getFileSize()).as("check fileSize").isEqualTo(actual.getFileSize()))
            .satisfies(e -> assertThat(e.getUploadedBy()).as("check uploadedBy").isEqualTo(actual.getUploadedBy()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFileUpdatableRelationshipsEquals(File expected, File actual) {
        assertThat(expected)
            .as("Verify File relationships")
            .satisfies(e -> assertThat(e.getFileVersion()).as("check fileVersion").isEqualTo(actual.getFileVersion()))
            .satisfies(e -> assertThat(e.getTags()).as("check tags").isEqualTo(actual.getTags()))
            .satisfies(e -> assertThat(e.getFolders()).as("check folders").isEqualTo(actual.getFolders()));
    }
}
